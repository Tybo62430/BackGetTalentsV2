// <auto-generated />
using System;
using BackGetTalentsV2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackGetTalentsV2.Migrations
{
    [DbContext(typeof(gettalentsContext))]
    [Migration("20210926111349_UseDouble")]
    partial class UseDouble
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("BackGetTalentsV2.Business.Address.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<double>("Lat")
                        .HasPrecision(10)
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasPrecision(10)
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<string>("Number")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "fk_address_user1_idx");

                    b.ToTable("address");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Category.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int")
                        .HasColumnName("picture_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PictureId" }, "fk_category_picture1_idx");

                    b.ToTable("category");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Convers.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("conversation");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Message.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime?>("SendAt")
                        .HasColumnType("datetime")
                        .HasColumnName("send_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ConversationId" }, "fk_message_conversation1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_message_user1_idx");

                    b.ToTable("message");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Picture.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<string>("MimeType")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MessageId" }, "fk_picture_message1_idx");

                    b.HasIndex(new[] { "ReviewId" }, "fk_picture_review1_idx");

                    b.ToTable("picture");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Relationship.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasColumnType("enum('ANONYMOUS','FAVORITE','BLACKLISTED')")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("UserLiked")
                        .HasColumnType("int")
                        .HasColumnName("user_liked");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "fk_favoredUser_user1_idx");

                    b.HasIndex(new[] { "UserLiked" }, "fk_favoredUser_user2_idx");

                    b.ToTable("relationship");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Review.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<int>("CommentatorId")
                        .HasColumnType("int")
                        .HasColumnName("commentator_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("Note")
                        .HasColumnType("int")
                        .HasColumnName("note");

                    b.Property<string>("Title")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentatorId" }, "fk_review_user1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_review_user2_idx");

                    b.ToTable("review");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Skill.Skill", b =>
                {
                    b.Property<int>("Idskill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idskill");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Idskill")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "fk_skill_category1_idx");

                    b.ToTable("skill");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirebaseUid")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int?>("Phone")
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int")
                        .HasColumnName("picture_id");

                    b.Property<string>("Presentation")
                        .HasColumnType("longtext")
                        .HasColumnName("presentation");

                    b.Property<string>("Pseudo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pseudo");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("registration_date");

                    b.Property<string>("Role")
                        .HasColumnType("enum('ADMIN','USER')")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasColumnType("enum('AVAILABLE','UNAVAILABLE','BANNED','DEACTIVATED')")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PictureId" }, "fk_user_picture1_idx");

                    b.ToTable("user");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.UserHasConversation.UserHasConversation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.HasKey("UserId", "ConversationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ConversationId" }, "fk_user_has_conversation_conversation1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_user_has_conversation_user1_idx");

                    b.ToTable("user_has_conversation");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.UserHasSkill.UserHasSkill", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("SkillIdskill")
                        .HasColumnType("int")
                        .HasColumnName("skill_idskill");

                    b.HasKey("UserId", "SkillIdskill")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "SkillIdskill" }, "fk_user_has_skill_skill1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_user_has_skill_user1_idx");

                    b.ToTable("user_has_skill");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Address.Address", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.User.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_address_user1")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Category.Category", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Picture.Picture", "Picture")
                        .WithMany("Categories")
                        .HasForeignKey("PictureId")
                        .HasConstraintName("fk_category_picture1");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Message.Message", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Convers.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("fk_message_conversation1")
                        .IsRequired();

                    b.HasOne("BackGetTalentsV2.Business.User.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_message_user1")
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Picture.Picture", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Message.Message", "Message")
                        .WithMany("Pictures")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("fk_picture_message1");

                    b.HasOne("BackGetTalentsV2.Business.Review.Review", "Review")
                        .WithMany("Pictures")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("fk_picture_review1");

                    b.Navigation("Message");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Relationship.Relationship", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.User.User", "User")
                        .WithMany("RelationshipUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_favoredUser_user1")
                        .IsRequired();

                    b.HasOne("BackGetTalentsV2.Business.User.User", "UserLikedNavigation")
                        .WithMany("RelationshipUserLikedNavigations")
                        .HasForeignKey("UserLiked")
                        .HasConstraintName("fk_favoredUser_user2")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserLikedNavigation");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Review.Review", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.User.User", "Commentator")
                        .WithMany("ReviewCommentators")
                        .HasForeignKey("CommentatorId")
                        .HasConstraintName("fk_review_user1")
                        .IsRequired();

                    b.HasOne("BackGetTalentsV2.Business.User.User", "User")
                        .WithMany("ReviewUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_review_user2")
                        .IsRequired();

                    b.Navigation("Commentator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Skill.Skill", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Category.Category", "Category")
                        .WithMany("Skills")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_skill_category1")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.User.User", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Picture.Picture", "Picture")
                        .WithMany("Users")
                        .HasForeignKey("PictureId")
                        .HasConstraintName("fk_user_picture1");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.UserHasConversation.UserHasConversation", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Convers.Conversation", "Conversation")
                        .WithMany("UserHasConversations")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("fk_user_has_conversation_conversation1")
                        .IsRequired();

                    b.HasOne("BackGetTalentsV2.Business.User.User", "User")
                        .WithMany("UserHasConversations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_has_conversation_user1")
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.UserHasSkill.UserHasSkill", b =>
                {
                    b.HasOne("BackGetTalentsV2.Business.Skill.Skill", "SkillIdskillNavigation")
                        .WithMany("UserHasSkills")
                        .HasForeignKey("SkillIdskill")
                        .HasConstraintName("fk_user_has_skill_skill1")
                        .IsRequired();

                    b.HasOne("BackGetTalentsV2.Business.User.User", "User")
                        .WithMany("UserHasSkills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_has_skill_user1")
                        .IsRequired();

                    b.Navigation("SkillIdskillNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Category.Category", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Convers.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserHasConversations");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Message.Message", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Picture.Picture", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Review.Review", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.Skill.Skill", b =>
                {
                    b.Navigation("UserHasSkills");
                });

            modelBuilder.Entity("BackGetTalentsV2.Business.User.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Messages");

                    b.Navigation("RelationshipUserLikedNavigations");

                    b.Navigation("RelationshipUsers");

                    b.Navigation("ReviewCommentators");

                    b.Navigation("ReviewUsers");

                    b.Navigation("UserHasConversations");

                    b.Navigation("UserHasSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
